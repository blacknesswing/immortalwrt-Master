# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: X86_Docker OpenWrt

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: X86_Docker.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part3.sh
  TZ: Asia/Shanghai

  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 初始化编译空间
      run: |
        sudo mkdir -p /workdir
        sudo chown $USER:$USER /workdir

    - name: 最大化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 1024
        build-mount-path: /workdir
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Checkout 仓库
      uses: actions/checkout@v4

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        sudo -E apt-get -qq install -y build-essential libncurses5-dev gawk git gettext libssl-dev xsltproc zip wget python3
        sudo -E apt-get install -y python3-pyelftools python3-dev python3-setuptools swig
        sudo timedatectl set-timezone "$TZ"

    - name: 克隆源码
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        df -hT

    - name: 缓存构建加速
      uses: HiGarfield/cachewrtbuild@main
      with:
        mixkey: ${{ env.REPO_BRANCH }}-${{ env.CONFIG_FILE }}
        prefix: ${{ github.workspace }}/openwrt

    - name: 自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新并安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载依赖包
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      run: |
        cd openwrt
        echo "使用 $(nproc) 线程编译..."
        make -j$(nproc) || make -j1 V=s
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: df -hT

    - name: 整理固件
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV      

    - name: 上传固件文件
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: immortalwrt_Master_X86_Docker${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        
    - name: 清理老的运行日志
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3
